{"version":3,"sources":["branch.js"],"names":["exec","require","deviceVendor","window","clientInformation","vendor","_API_CLASS","execute","method","params","Promise","resolve","reject","res","err","executeCallback","callback","console","error","Branch","debugMode","prototype","initSession","setMixpanelToken","token","setDebug","isEnabled","getFirstReferringParams","getLatestReferringParams","setIdentity","identity","logout","userCompletedAction","action","metaData","args","push","createBranchUniversalObject","options","then","obj","message","instanceId","branchUniversalObjectId","registerView","generateShortUrl","controlParameters","showShareSheet","shareText","onShareSheetLaunched","indexOf","onShareSheetDismissed","onLinkShareResponse","onChannelSelected","listOnSpotlight","loadRewards","bucket","redeemRewards","value","creditHistory","NonBranchLinkHandler","response","module","exports"],"mappings":"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","file":"branch.js","sourcesContent":["/**\n * Branch.IO SDK\n * -------------\n * Method usage:\n *     All methods are promisified, therefore you can call .then(successCallback, errorCallback) for any of the method\n *     called for executing success or error callbacks.\n */\n\nvar exec = require('cordova/exec');\nvar deviceVendor = window.clientInformation.vendor;\nvar _API_CLASS = 'BranchSDK'; // SDK Class\n\n/**\n * Execute SDK method using cordova.exec()\n *\n * @param  (String) method - The class method to execute.\n * @param  (Array) params  - Method parameter(s) to pass.\n *\n * @return (Promise)\n */\nfunction execute(method, params) {\n\n    params = (!params) ? [] : params;\n\n    return new Promise(function(resolve, reject) {\n        exec(function(res) {\n            resolve(res);\n        }, function(err) {\n            reject(err);\n        }, _API_CLASS, method, params);\n    });\n\n}\n\n/**\n * Set listener callback for SDK method.\n *\n * @param  (String) method      - The class method to execute.\n * @param  (Function) callback  - The method listener callback.\n * @param  (Array) params       - The method listener parameters.\n *\n * @return (Promise)\n */\nfunction executeCallback(method, callback, params) {\n\n    params = (!params) ? [] : params;\n\n    exec(callback, function(err) {\n        console.error(err);\n    }, _API_CLASS, method, params);\n\n}\n\n/**\n * @class Branch\n */\nvar Branch = function() {\n\n    this.debugMode = false;\n\n};\n\n/**\n * Initialize the Branch instance.\n *\n * @return (Promise)\n */\nBranch.prototype.initSession = function() {\n\n    return execute('initSession');\n\n};\n\n/**\n * Get Mixpanel tolen/assisstance.\n * NOTE: This must be called before initSession\n *\n * @param (String) token. Default = false\n *\n * @return (Promise)\n */\nBranch.prototype.setMixpanelToken = function(token) {\n\n    return execute('setMixpanelToken', [ token ]);\n\n};\n\n/**\n * Set debug mode to simulate fresh installs.\n * NOTE: This must be called before initSession\n *\n * @param (Boolean) isEnabled. Default = false\n *\n * @return (Promise)\n */\nBranch.prototype.setDebug = function(isEnabled) {\n\n    isEnabled = (typeof isEnabled !== 'boolean') ? false : isEnabled;\n\n    this.debugMode = isEnabled;\n\n    return execute('setDebug', [ isEnabled ]);\n\n};\n\n/**\n * Retrieves the install session parameters.\n *\n * @return (Promise)\n */\nBranch.prototype.getFirstReferringParams = function() {\n\n    return execute('getFirstReferringParams');\n\n};\n\n/**\n * Retrieves the latest referring parameters.\n *\n * @return (Promise)\n */\nBranch.prototype.getLatestReferringParams = function() {\n\n    return execute('getLatestReferringParams');\n\n};\n\n/**\n * Sets the identity of a user and returns the data.\n *\n * @param (String) identity - A unique identifier for the user [REQUIRED]\n *\n * @return (Promise)\n *\n */\nBranch.prototype.setIdentity = function(identity) {\n\n    if (identity) {\n        return execute('setIdentity', [ identity ]);\n    }\n else {\n        return new Promise(function(resolve, reject) {\n            reject('Please set an identity');\n        });\n    }\n\n};\n\n/**\n * Logout from the current session. Replace session and identity IDs.\n *\n * @return (Promise)\n */\nBranch.prototype.logout = function() {\n\n    return execute('logout');\n\n};\n\n/**\n * Register custom events.\n *\n * @param (String) action - Name of the custom action\n * @param (Object) metaData - Data to pass with the action [OPTIONAL]\n *\n * @return (Promise)\n */\nBranch.prototype.userCompletedAction = function(action, metaData) {\n\n    var args = [ action ];\n\n    if (metaData) {\n        args.push(metaData);\n    }\n\n    return execute('userCompletedAction', args);\n\n};\n\n/**\n * Create an universal Branch object\n *\n * @params (Object) options\n *\n * @return (Promise)\n *\n * options:\n *    --------------------------------------------------------------\n *    |          KEY          |    TYPE    |      DESCRIPTION      |\n *    --------------------------------------------------------------\n *    |  canonicalIdentifier  |   String   | The object identifier |\n *    |         title         |   String   |   The object title    |\n *    |  contentDescription   |   String   |  Object description   |\n *    |    contentImageUrl    |   String   |     The image URL     |\n *    |  contentIndexingMode  |   String   |    Indexing Mode      |\n *    |                       |            |('private' or 'public')|\n *    |    contentMetadata    |   Object   |   Custom key/value    |\n *    --------------------------------------------------------------\n */\nBranch.prototype.createBranchUniversalObject = function(options) {\n\n    return new Promise(function(resolve, reject) {\n        execute('createBranchUniversalObject', [ options ]).then(function(res) {\n\n            var obj = {\n                message: res.message,\n                instanceId: res.branchUniversalObjectId\n            };\n\n            // Attach object functions\n            /**\n             * Register view count.\n             *\n             * @return (Promise)\n             */\n            obj.registerView = function() {\n\n                return execute('registerView', [ obj.instanceId ]);\n\n            };\n\n            /**\n             * Generates a short url.\n             *\n             * @param (Object) options\n             * @param (Object) controlParameters\n             *\n             * @return (Promise)\n             *\n             * options:\n             *    --------------------------------------------------\n             *    |    KEY    |    TYPE    |      DESCRIPTION      |\n             *    --------------------------------------------------\n             *    |  feature  |   String   |   The link feature    |\n             *    |   alias   |   String   |    The link alias     |\n             *    |  channel  |   String   |   The link channel    |\n             *    |   stage   |   String   |    The link stage     |\n             *    |  duration |    Int     |   The link duration   |\n             *    --------------------------------------------------\n             *\n             * controlParameters:\n             *    -------------------------------------------------------\n             *    |         KEY        |    TYPE    |    DESCRIPTION    |\n             *    -------------------------------------------------------\n             *    |    $fallback_url   |   String   |   Fallback URL    |\n             *    |    $desktop_url    |   String   |   Desktop URL     |\n             *    |    $android_url    |   String   |   Android URL     |\n             *    |      $ios_url      |   String   |     iOS URL       |\n             *    |      $ipad_url     |   String   |    iPad URL       |\n             *    |      $fire_url     |   String   |  Kindle Fire URL  |\n             *    |  $blackberry_url   |   String   |   Blackberry URL  |\n             *    | $windows_phone_url |   String   |  Kindle Fire URL  |\n             *    -------------------------------------------------------\n             */\n            obj.generateShortUrl = function(options, controlParameters) {\n\n                return execute('generateShortUrl', [ obj.instanceId, options, controlParameters ]);\n\n            };\n\n            /**\n             * Show the share dialog.\n             *\n             * @param (Object) options\n             * @param (Object) controlParameters\n             * @param (String) shareText [OPTIONAL]\n             *\n             * @return (Promise)\n             *\n             * options:\n             *    --------------------------------------------------\n             *    |    KEY    |    TYPE    |      DESCRIPTION      |\n             *    --------------------------------------------------\n             *    |  feature  |   String   |   The link feature    |\n             *    |   alias   |   String   |    The link alias     |\n             *    |  channel  |   String   |   The link channel    |\n             *    |   stage   |   String   |    The link stage     |\n             *    |  duration |    Int     |   The link duration   |\n             *    --------------------------------------------------\n             *\n             * controlParameters:\n             *    -------------------------------------------------------\n             *    |         KEY        |    TYPE    |    DESCRIPTION    |\n             *    -------------------------------------------------------\n             *    |    $fallback_url   |   String   |   Fallback URL    |\n             *    |    $desktop_url    |   String   |   Desktop URL     |\n             *    |    $android_url    |   String   |   Android URL     |\n             *    |      $ios_url      |   String   |     iOS URL       |\n             *    |      $ipad_url     |   String   |    iPad URL       |\n             *    |      $fire_url     |   String   |  Kindle Fire URL  |\n             *    |  $blackberry_url   |   String   |   Blackberry URL  |\n             *    | $windows_phone_url |   String   |  Kindle Fire URL  |\n             *    -------------------------------------------------------\n             */\n            obj.showShareSheet = function(options, controlParameters, shareText) {\n\n                if (!shareText) {\n                    shareText = 'This stuff is awesome: ';\n                }\n\n                return execute('showShareSheet', [ obj.instanceId, options, controlParameters, shareText ]);\n\n            };\n\n            /**\n             * Set on share sheet launched listener callback.\n             *\n             * @param (Function) callback\n             */\n            obj.onShareSheetLaunched = function(callback) {\n\n                if (deviceVendor.indexOf('Apple') < 0) {\n                    executeCallback('onShareLinkDialogLaunched', callback, [ obj.instanceId ]);\n                }\n\n            };\n\n            obj.onShareSheetDismissed = function(callback) {\n\n                executeCallback('onShareLinkDialogDismissed', callback, [ obj.instanceId ]);\n\n            }\n\n            /**\n             * Set on link share listener callback.\n             *\n             * @param (Function) callback\n             */\n            obj.onLinkShareResponse = function(callback) {\n\n                executeCallback('onLinkShareResponse', callback, [ obj.instanceId ]);\n\n            };\n\n            /**\n             * Set on channel select listener callback.\n             *\n             * @param (Function) callback\n             */\n            obj.onChannelSelected = function(callback) {\n\n                if (deviceVendor.indexOf('Apple') < 0) {\n                    executeCallback('onChannelSelected', callback, [ obj.instanceId ]);\n                }\n\n            };\n\n            /**\n             * List item on Spotlight (iOS Only).\n             */\n            obj.listOnSpotlight = function() {\n\n                return execute('listOnSpotlight', [ obj.instanceId ]);\n\n            };\n\n            resolve(obj);\n\n        }, function(err) {\n            reject(err);\n        });\n    });\n\n};\n\n/**\n * Retrieve the current reward balance.\n *\n * @return (Promise)\n */\nBranch.prototype.loadRewards = function(bucket) {\n\n    if (!bucket) {\n        bucket = '';\n    }\n\n    return execute('loadRewards', [ bucket ]);\n\n};\n\n/**\n * Redeem rewards to your account.\n *\n * @param (Int) value - The amount to redeem.\n * @param (String) bucket - The value containing the name of the referral bucket to attempt to redeem credits from. [OPTIONAL]\n *\n * @return (Promise)\n */\nBranch.prototype.redeemRewards = function(value, bucket) {\n\n    var params = [ value ];\n\n    if (bucket) {\n        params.push(bucket);\n    }\n\n    return execute('redeemRewards', params);\n\n};\n\n/**\n * Retrieve the entire history of credits and redemptions from the individual user.\n *\n * @return (Promise)\n */\nBranch.prototype.creditHistory = function() {\n\n    return execute('getCreditHistory');\n\n};\n\n/**\n * NonBranchLinkHandler callback placeholder.\n *\n * @param {String} response\n */\nwindow.NonBranchLinkHandler = (typeof NonBranchLinkHandler === 'undefined') ? function(response) {} : NonBranchLinkHandler;\n\nmodule.exports = new Branch;\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["beforePluginInstallHook.js"],"names":["exec","require","path","fs","INSTALLATION_FLAG_FILE_NAME","isNodeModuleInstalled","moduleName","installed","module","err","installNodeModule","callback","printLog","cmd","stdout","stderr","installRequiredNodeModules","modulesToInstall","length","shift","logStart","console","log","msg","formattedMsg","isInstallationAlreadyPerformed","ctx","pathToInstallFlag","join","opts","projectRoot","plugin","id","isInstalled","content","readFileSync","createPluginInstalledFlag","closeSync","openSync","readDependenciesFromPackageJson","data","dependencies","modules","push","exports"],"mappings":"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","file":"beforePluginInstallHook.js","sourcesContent":["/**\nHook is executed when plugin is added to the project.\nIt will check all necessary module dependencies and install the missing ones locally.\n*/\n\nvar exec = require('child_process').exec,\n  path = require('path'),\n  fs = require('fs'),\n  INSTALLATION_FLAG_FILE_NAME = '.installed';\n\n// region NPM specific\n\n/**\n * Check if node package is installed.\n *\n * @param {String} moduleName\n * @return {Boolean} true if package already installed\n */\nfunction isNodeModuleInstalled(moduleName) {\n  var installed = true;\n  try {\n    var module = require(moduleName);\n  } catch (err) {\n    installed = false;\n  }\n\n  return installed;\n}\n\n/**\n * Install node module locally.\n * Basically, it runs 'npm install module_name'.\n *\n * @param {String} moduleName\n * @param {Callback(error)} callback\n */\nfunction installNodeModule(moduleName, callback) {\n  if (isNodeModuleInstalled(moduleName)) {\n    printLog('Node module ' + moduleName + ' is found');\n    callback(null);\n    return;\n  }\n  printLog('Can\\'t find module ' + moduleName + ', running npm install');\n\n  var cmd = 'cd plugins/io.branch.sdk; npm install -D ' + moduleName;\n  exec(cmd, function(err, stdout, stderr) {\n    callback(err);\n  });\n}\n\n/**\n * Install all required node packages.\n */\nfunction installRequiredNodeModules(modulesToInstall) {\n  if (!modulesToInstall.length) {\n    return;\n  }\n\n  var moduleName = modulesToInstall.shift();\n  installNodeModule(moduleName, function(err) {\n    if (err) {\n      printLog('Failed to install module ' + moduleName + ':' + err);\n      return;\n    }\n\n    printLog('Module ' + moduleName + ' is installed');\n    installRequiredNodeModules(modulesToInstall);\n  });\n}\n\n// endregion\n\n// region Logging\n\nfunction logStart() {\n  console.log('Checking dependencies:');\n}\n\nfunction printLog(msg) {\n  var formattedMsg = '    ' + msg;\n  console.log(formattedMsg);\n}\n\n// endregion\n\n// region Private API\n\n/**\n * Check if we already executed this hook.\n *\n * @param {Object} ctx - cordova context\n * @return {Boolean} true if already executed; otherwise - false\n */\nfunction isInstallationAlreadyPerformed(ctx) {\n  var pathToInstallFlag = path.join(ctx.opts.projectRoot, 'plugins', ctx.opts.plugin.id, INSTALLATION_FLAG_FILE_NAME),\n    isInstalled = false;\n  try {\n    var content = fs.readFileSync(pathToInstallFlag);\n    isInstalled = true;\n  } catch (err) {\n  }\n\n  return isInstalled;\n}\n\n/**\n * Create empty file - indicator, that we tried to install dependency modules after installation.\n * We have to do that, or this hook is gonna be called on any plugin installation.\n */\nfunction createPluginInstalledFlag(ctx) {\n  var pathToInstallFlag = path.join(ctx.opts.projectRoot, 'plugins', ctx.opts.plugin.id, INSTALLATION_FLAG_FILE_NAME);\n\n  fs.closeSync(fs.openSync(pathToInstallFlag, 'w'));\n}\n\n// endregion\n\n/**\n * Read dependencies from the package.json.\n * We will install them on the next step.\n *\n * @param {Object} ctx - cordova context\n * @return {Array} list of modules to install\n */\nfunction readDependenciesFromPackageJson(ctx) {\n  var data = require(path.join(ctx.opts.projectRoot, 'plugins', ctx.opts.plugin.id, 'package.json')),\n    dependencies = data['dependencies'],\n    modules = [];\n\n  if (!dependencies) {\n    return modules;\n  }\n\n  for (var module in dependencies) {\n    modules.push(module);\n  }\n\n  return modules;\n}\n\n// hook's entry point\nmodule.exports = function(ctx) {\n  // exit if we already executed this hook once\n  if (isInstallationAlreadyPerformed(ctx)) {\n    return;\n  }\n\n  logStart();\n\n  var modules = readDependenciesFromPackageJson(ctx);\n  installRequiredNodeModules(modules);\n\n  createPluginInstalledFlag(ctx);\n};\n"],"sourceRoot":"/source/"}
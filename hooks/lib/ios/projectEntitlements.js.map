{"version":3,"sources":["lib/ios/projectEntitlements.js"],"names":["path","require","fs","plist","mkpath","ConfigXmlHelper","ASSOCIATED_DOMAINS","context","projectRoot","projectName","entitlementsFilePath","module","exports","generateAssociatedDomainsEntitlements","generateEntitlements","cordovaContext","pluginPreferences","currentEntitlements","getEntitlementsFileContent","newEntitlements","injectPreferences","saveContentToEntitlementsFile","content","plistContent","build","filePath","pathToEntitlementsFile","sync","dirname","writeFileSync","pathToFile","readFileSync","err","defaultEntitlementsFile","parse","generateAssociatedDomainsContent","domainsList","link","hosts","forEach","host","domainsListEntryForHost","push","name","undefined","join","getProjectRoot","getProjectName","opts","configXmlHelper"],"mappings":"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","file":"lib/ios/projectEntitlements.js","sourcesContent":["/*\nScript creates entitlements file with the list of hosts, specified in config.xml.\nFile name is: ProjectName.entitlements\nLocation: ProjectName/\n\nScript only generates content. File it self is included in the xcode project in another hook: xcodePreferences.js.\n*/\n(function() {\n\n  var path = require('path'),\n    fs = require('fs'),\n    plist = require('plist'),\n    mkpath = require('mkpath'),\n    ConfigXmlHelper = require('../configXmlHelper.js'),\n    ASSOCIATED_DOMAINS = 'com.apple.developer.associated-domains',\n    context,\n    projectRoot,\n    projectName,\n    entitlementsFilePath;\n\n  module.exports = {\n    generateAssociatedDomainsEntitlements: generateEntitlements\n  };\n\n  // region Public API\n\n  /**\n   * Generate entitlements file content.\n   *\n   * @param {Object} cordovaContext - cordova context object\n   * @param {Object} pluginPreferences - plugin preferences from config.xml; already parsed\n   */\n  function generateEntitlements(cordovaContext, pluginPreferences) {\n    context = cordovaContext;\n\n    var currentEntitlements = getEntitlementsFileContent(),\n      newEntitlements = injectPreferences(currentEntitlements, pluginPreferences);\n\n    saveContentToEntitlementsFile(newEntitlements);\n  }\n\n  // endregion\n\n  // region Work with entitlements file\n\n  /**\n   * Save data to entitlements file.\n   *\n   * @param {Object} content - data to save; JSON object that will be transformed into xml\n   */\n  function saveContentToEntitlementsFile(content) {\n    var plistContent = plist.build(content),\n      filePath = pathToEntitlementsFile();\n\n    // ensure that file exists\n    mkpath.sync(path.dirname(filePath));\n\n    // save it's content\n    fs.writeFileSync(filePath, plistContent, 'utf8');\n  }\n\n  /**\n   * Read data from existing entitlements file. If none exist - default value is returned\n   *\n   * @return {String} entitlements file content\n   */\n  function getEntitlementsFileContent() {\n    var pathToFile = pathToEntitlementsFile(),\n      content;\n\n    try {\n      content = fs.readFileSync(pathToFile, 'utf8');\n    } catch (err) {\n      return defaultEntitlementsFile();\n    }\n\n    return plist.parse(content);\n  }\n\n  /**\n   * Get content for an empty entitlements file.\n   *\n   * @return {String} default entitlements file content\n   */\n  function defaultEntitlementsFile() {\n    return {};\n  }\n\n  /**\n   * Inject list of hosts into entitlements file.\n   *\n   * @param {Object} currentEntitlements - entitlements where to inject preferences\n   * @param {Object} pluginPreferences - list of hosts from config.xml\n   * @return {Object} new entitlements content\n   */\n  function injectPreferences(currentEntitlements, pluginPreferences) {\n    var newEntitlements = currentEntitlements,\n      content = generateAssociatedDomainsContent(pluginPreferences);\n\n    newEntitlements[ASSOCIATED_DOMAINS] = content;\n\n    return newEntitlements;\n  }\n\n  /**\n   * Generate content for associated-domains dictionary in the entitlements file.\n   *\n   * @param {Object} pluginPreferences - list of hosts from conig.xml\n   * @return {Object} associated-domains dictionary content\n   */\n  function generateAssociatedDomainsContent(pluginPreferences) {\n    var domainsList = [],\n      link;\n\n    // generate list of host links\n    pluginPreferences.hosts.forEach(function(host) {\n      link = domainsListEntryForHost(host);\n      domainsList.push(link);\n    });\n\n    return domainsList;\n  }\n\n  /**\n   * Generate domain record for the given host.\n   *\n   * @param {Object} host - host entry\n   * @return {String} record\n   */\n  function domainsListEntryForHost(host) {\n    return 'applinks:' + host.name;\n  }\n\n  // endregion\n\n  // region Path helper methods\n\n  /**\n   * Path to entitlements file.\n   *\n   * @return {String} absolute path to entitlements file\n   */\n  function pathToEntitlementsFile() {\n    if (entitlementsFilePath === undefined) {\n      entitlementsFilePath = path.join(getProjectRoot(), 'platforms', 'ios', getProjectName(), 'Resources', getProjectName() + '.entitlements');\n    }\n\n    return entitlementsFilePath;\n  }\n\n  /**\n   * Projects root folder path.\n   *\n   * @return {String} absolute path to the projects root\n   */\n  function getProjectRoot() {\n    return context.opts.projectRoot;\n  }\n\n  /**\n   * Name of the project from config.xml\n   *\n   * @return {String} project name\n   */\n  function getProjectName() {\n    if (projectName === undefined) {\n      var configXmlHelper = new ConfigXmlHelper(context);\n      projectName = configXmlHelper.getProjectName();\n    }\n\n    return projectName;\n  }\n\n  // endregion\n\n})();\n"],"sourceRoot":"/source/"}
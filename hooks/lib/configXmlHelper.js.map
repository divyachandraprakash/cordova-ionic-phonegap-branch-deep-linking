{"version":3,"sources":["lib/configXmlHelper.js"],"names":["path","require","xmlHelper","ANDROID","IOS","CONFIG_FILE_NAME","context","projectRoot","module","exports","ConfigXmlHelper","cordovaContext","opts","prototype","read","filePath","getConfigXmlFilePath","readXmlAsJson","getPackageName","platform","configFilePath","config","getCordovaConfigParser","packageName","android_packageName","ios_CFBundleIdentifier","undefined","length","getProjectName","ConfigParser","requireCordovaModule","e","join","name"],"mappings":";;AAAA;;;AAGA,CAAC,YAAW;AACV,MAAIA,OAAOC,QAAQ,MAAR,CAAX;AAAA,MACEC,YAAYD,QAAQ,gBAAR,CADd;AAAA,MAEEE,UAAU,SAFZ;AAAA,MAGEC,MAAM,KAHR;AAAA,MAIEC,mBAAmB,YAJrB;AAAA,MAKEC,OALF;AAAA,MAMEC,WANF;;AAQAC,SAAOC,OAAP,GAAiBC,eAAjB;;AAEA;;AAEA;;;;;AAKA,WAASA,eAAT,CAAyBC,cAAzB,EAAyC;AACvCL,cAAUK,cAAV;AACAJ,kBAAcD,QAAQM,IAAR,CAAaL,WAA3B;AACD;;AAED;;;;;AAKAG,kBAAgBG,SAAhB,CAA0BC,IAA1B,GAAiC,YAAW;AAC1C,QAAIC,WAAWC,sBAAf;;AAEA,WAAOd,UAAUe,aAAV,CAAwBF,QAAxB,CAAP;AACD,GAJD;;AAMA;;;;;;AAMAL,kBAAgBG,SAAhB,CAA0BK,cAA1B,GAA2C,UAASC,QAAT,EAAmB;AAC5D,QAAIC,iBAAiBJ,sBAArB;AAAA,QACEK,SAASC,uBAAuBF,cAAvB,CADX;AAAA,QAEEG,WAFF;;AAIA,YAAQJ,QAAR;AACE,WAAKhB,OAAL;AAAc;AACVoB,wBAAcF,OAAOG,mBAAP,EAAd;AACA;AACD;AACH,WAAKpB,GAAL;AAAU;AACNmB,wBAAcF,OAAOI,sBAAP,EAAd;AACA;AACD;AARL;AAUA,QAAIF,gBAAgBG,SAAhB,IAA6BH,YAAYI,MAAZ,IAAsB,CAAvD,EAA0D;AACxDJ,oBAAcF,OAAOE,WAAP,EAAd;AACD;;AAED,WAAOA,WAAP;AACD,GApBD;;AAsBA;;;;;AAKAb,kBAAgBG,SAAhB,CAA0Be,cAA1B,GAA2C,YAAW;AACpD,WAAOA,gBAAP;AACD,GAFD;;AAIA;;AAEA;;AAEA;;;;;;AAMA,WAASN,sBAAT,CAAgCF,cAAhC,EAAgD;AAC9C,QAAIS,YAAJ;;AAEA;AACA;AACA,QAAI;AACFA,qBAAevB,QAAQwB,oBAAR,CAA6B,8CAA7B,CAAf;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACVF,qBAAevB,QAAQwB,oBAAR,CAA6B,2CAA7B,CAAf;AACD;;AAED,WAAO,IAAID,YAAJ,CAAiBT,cAAjB,CAAP;AACD;;AAED;;;AAGA,WAASJ,oBAAT,GAAgC;AAC9B,WAAOhB,KAAKgC,IAAL,CAAUzB,WAAV,EAAuBF,gBAAvB,CAAP;AACD;;AAED;;;AAGA,WAASuB,cAAT,GAA0B;AACxB,QAAIR,iBAAiBJ,sBAArB;AAAA,QACEK,SAASC,uBAAuBF,cAAvB,CADX;;AAGA,WAAOC,OAAOY,IAAP,EAAP;AACD;;AAED;AAED,CAlHD","file":"lib/configXmlHelper.js","sourcesContent":["/*\nHelper class to read data from config.xml file.\n*/\n(function() {\n  var path = require('path'),\n    xmlHelper = require('./xmlHelper.js'),\n    ANDROID = 'android',\n    IOS = 'ios',\n    CONFIG_FILE_NAME = 'config.xml',\n    context,\n    projectRoot;\n\n  module.exports = ConfigXmlHelper;\n\n  // region public API\n\n  /**\n   * Constructor.\n   *\n   * @param {Object} cordovaContext - cordova context object\n   */\n  function ConfigXmlHelper(cordovaContext) {\n    context = cordovaContext;\n    projectRoot = context.opts.projectRoot;\n  }\n\n  /**\n   * Read config.xml data as JSON object.\n   *\n   * @return {Object} JSON object with data from config.xml\n   */\n  ConfigXmlHelper.prototype.read = function() {\n    var filePath = getConfigXmlFilePath();\n\n    return xmlHelper.readXmlAsJson(filePath);\n  }\n\n  /**\n   * Get package name for the application. Depends on the platform.\n   *\n   * @param {String} platform - 'ios' or 'android'; for what platform we need a package name\n   * @return {String} package/bundle name\n   */\n  ConfigXmlHelper.prototype.getPackageName = function(platform) {\n    var configFilePath = getConfigXmlFilePath(),\n      config = getCordovaConfigParser(configFilePath),\n      packageName;\n\n    switch (platform) {\n      case ANDROID: {\n          packageName = config.android_packageName();\n          break;\n        }\n      case IOS: {\n          packageName = config.ios_CFBundleIdentifier();\n          break;\n        }\n    }\n    if (packageName === undefined || packageName.length == 0) {\n      packageName = config.packageName();\n    }\n\n    return packageName;\n  }\n\n  /**\n   * Get name of the current project.\n   *\n   * @return {String} name of the project\n   */\n  ConfigXmlHelper.prototype.getProjectName = function() {\n    return getProjectName();\n  }\n\n  // endregion\n\n  // region Private API\n\n  /**\n   * Get config parser from cordova library.\n   *\n   * @param {String} configFilePath absolute path to the config.xml file\n   * @return {Object}\n   */\n  function getCordovaConfigParser(configFilePath) {\n    var ConfigParser;\n\n    // If we are running Cordova 5.4 or abova - use parser from cordova-common.\n    // Otherwise - from cordova-lib.\n    try {\n      ConfigParser = context.requireCordovaModule('cordova-common/src/ConfigParser/ConfigParser');\n    } catch (e) {\n      ConfigParser = context.requireCordovaModule('cordova-lib/src/configparser/ConfigParser')\n    }\n\n    return new ConfigParser(configFilePath);\n  }\n\n  /**\n   * Get absolute path to the config.xml.\n   */\n  function getConfigXmlFilePath() {\n    return path.join(projectRoot, CONFIG_FILE_NAME);\n  }\n\n  /**\n   * Get project name from config.xml\n   */\n  function getProjectName() {\n    var configFilePath = getConfigXmlFilePath(),\n      config = getCordovaConfigParser(configFilePath);\n\n    return config.name();\n  }\n\n  // endregion\n\n})();\n"],"sourceRoot":"/source/"}
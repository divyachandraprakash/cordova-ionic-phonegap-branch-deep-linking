{"version":3,"sources":["lib/xmlHelper.js"],"names":["fs","require","xml2js","module","exports","readXmlAsJson","writeJsonAsXml","filePath","xmlData","xmlParser","parsedData","readFileSync","Parser","parseString","err","data","jsData","options","xmlBuilder","Builder","changedXmlData","buildObject","isSaved","writeFileSync","console","log"],"mappings":";;AAAA;;;AAGA,CAAC,YAAW;;AAEV,MAAIA,KAAKC,QAAQ,IAAR,CAAT;AAAA,MACEC,SAASD,QAAQ,QAAR,CADX;;AAGAE,SAAOC,OAAP,GAAiB;AACfC,mBAAeA,aADA;AAEfC,oBAAgBA;AAFD,GAAjB;;AAKA;;;;;;AAMA,WAASD,aAAT,CAAuBE,QAAvB,EAAiC;AAC/B,QAAIC,OAAJ,EACEC,SADF,EAEEC,UAFF;;AAIA,QAAI;AACFF,gBAAUR,GAAGW,YAAH,CAAgBJ,QAAhB,CAAV;AACAE,kBAAY,IAAIP,OAAOU,MAAX,EAAZ;AACAH,gBAAUI,WAAV,CAAsBL,OAAtB,EAA+B,UAASM,GAAT,EAAcC,IAAd,EAAoB;AACjD,YAAIA,IAAJ,EAAU;AACRL,uBAAaK,IAAb;AACD;AACF,OAJD;AAKD,KARD,CAQE,OAAOD,GAAP,EAAY,CAAE;;AAEhB,WAAOJ,UAAP;AACD;;AAED;;;;;;;AAOA,WAASJ,cAAT,CAAwBU,MAAxB,EAAgCT,QAAhC,EAA0CU,OAA1C,EAAmD;AACjD,QAAIC,aAAa,IAAIhB,OAAOiB,OAAX,CAAmBF,OAAnB,CAAjB;AAAA,QACEG,iBAAiBF,WAAWG,WAAX,CAAuBL,MAAvB,CADnB;AAAA,QAEEM,UAAU,IAFZ;;AAIA,QAAI;AACFtB,SAAGuB,aAAH,CAAiBhB,QAAjB,EAA2Ba,cAA3B;AACD,KAFD,CAEE,OAAON,GAAP,EAAY;AACZU,cAAQC,GAAR,CAAYX,GAAZ;AACAQ,gBAAU,KAAV;AACD;;AAED,WAAOA,OAAP;AACD;AAEF,CAxDD","file":"lib/xmlHelper.js","sourcesContent":["/*\nSmall helper class to read/write from/to xml file.\n*/\n(function() {\n\n  var fs = require('fs'),\n    xml2js = require('xml2js');\n\n  module.exports = {\n    readXmlAsJson: readXmlAsJson,\n    writeJsonAsXml: writeJsonAsXml\n  };\n\n  /**\n   * Read data from the xml file as JSON object.\n   *\n   * @param {String} filePath - absolute path to xml file\n   * @return {Object} JSON object with the contents of the xml file\n   */\n  function readXmlAsJson(filePath) {\n    var xmlData,\n      xmlParser,\n      parsedData;\n\n    try {\n      xmlData = fs.readFileSync(filePath);\n      xmlParser = new xml2js.Parser();\n      xmlParser.parseString(xmlData, function(err, data) {\n        if (data) {\n          parsedData = data;\n        }\n      });\n    } catch (err) {}\n\n    return parsedData;\n  }\n\n  /**\n   * Write JSON object as xml into the specified file.\n   *\n   * @param {Object} jsData - JSON object to write\n   * @param {String} filePath - path to the xml file where data should be saved\n   * @return {boolean} true - if data saved to file; false - otherwise\n   */\n  function writeJsonAsXml(jsData, filePath, options) {\n    var xmlBuilder = new xml2js.Builder(options),\n      changedXmlData = xmlBuilder.buildObject(jsData),\n      isSaved = true;\n\n    try {\n      fs.writeFileSync(filePath, changedXmlData);\n    } catch (err) {\n      console.log(err);\n      isSaved = false;\n    }\n\n    return isSaved;\n  }\n\n})();\n"],"sourceRoot":"/source/"}
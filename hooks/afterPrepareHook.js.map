{"version":3,"sources":["afterPrepareHook.js"],"names":["configParser","require","androidManifestWriter","iosProjectEntitlements","iosProjectPreferences","ANDROID","IOS","module","exports","ctx","run","cordovaContext","pluginPreferences","readPreferences","platformsList","opts","platforms","hosts","length","console","warn","forEach","platform","activateUniversalLinksInAndroid","activateUniversalLinksInIos","writePreferences","enableAssociativeDomainsCapability","generateAssociatedDomainsEntitlements"],"mappings":";;AAAA;;;;;;;AAOA,IAAIA,eAAeC,QAAQ,0BAAR,CAAnB;AAAA,IACEC,wBAAwBD,QAAQ,iCAAR,CAD1B;;AAEE;AACAE,yBAAyBF,QAAQ,kCAAR,CAH3B;AAAA,IAIEG,wBAAwBH,QAAQ,+BAAR,CAJ1B;AAAA,IAKEI,UAAU,SALZ;AAAA,IAMEC,MAAM,KANR;;AAQAC,OAAOC,OAAP,GAAiB,UAASC,GAAT,EAAc;AAC7BC,MAAID,GAAJ;AACD,CAFD;;AAIA;;;;;AAKA,SAASC,GAAT,CAAaC,cAAb,EAA6B;AAC3B,MAAIC,oBAAoBZ,aAAaa,eAAb,CAA6BF,cAA7B,CAAxB;AAAA,MACEG,gBAAgBH,eAAeI,IAAf,CAAoBC,SADtC;;AAGA;AACA,MAAIJ,qBAAqB,IAAzB,EAA+B;AAC7B;AACD;;AAED;AACA,MAAIA,kBAAkBK,KAAlB,IAA2B,IAA3B,IAAmCL,kBAAkBK,KAAlB,CAAwBC,MAAxB,IAAkC,CAAzE,EAA4E;AAC1EC,YAAQC,IAAR,CAAa,sFAAb;AACA;AACD;;AAEDN,gBAAcO,OAAd,CAAsB,UAASC,QAAT,EAAmB;AACvC,YAAQA,QAAR;AACE,WAAKjB,OAAL;AAAc;AACVkB,0CAAgCZ,cAAhC,EAAgDC,iBAAhD;AACA;AACD;AACH,WAAKN,GAAL;AAAU;AACNkB,sCAA4Bb,cAA5B,EAA4CC,iBAA5C;AACA;AACD;AARL;AAUD,GAXD;AAYD;;AAED;;;;;;AAMA,SAASW,+BAAT,CAAyCZ,cAAzC,EAAyDC,iBAAzD,EAA4E;AAC1E;AACAV,wBAAsBuB,gBAAtB,CAAuCd,cAAvC,EAAuDC,iBAAvD;AAED;;AAED;;;;;;AAMA,SAASY,2BAAT,CAAqCb,cAArC,EAAqDC,iBAArD,EAAwE;AACtE;AACAR,wBAAsBsB,kCAAtB,CAAyDf,cAAzD;;AAEA;AACAR,yBAAuBwB,qCAAvB,CAA6DhB,cAA7D,EAA6EC,iBAA7E;AAED","file":"afterPrepareHook.js","sourcesContent":["/**\nHook is executed at the end of the 'prepare' stage. Usually, when you call 'cordova build'.\n\nIt will inject required preferences in the platform-specific projects, based on <branch-config>\ndata you have specified in the projects config.xml file.\n*/\n\nvar configParser = require('./lib/configXmlParser.js'),\n  androidManifestWriter = require('./lib/android/manifestWriter.js'),\n  // androidWebHook = require('./lib/android/webSiteHook.js'),\n  iosProjectEntitlements = require('./lib/ios/projectEntitlements.js'),\n  iosProjectPreferences = require('./lib/ios/xcodePreferences.js'),\n  ANDROID = 'android',\n  IOS = 'ios';\n\nmodule.exports = function(ctx) {\n  run(ctx);\n};\n\n/**\n * Execute hook.\n *\n * @param {Object} cordovaContext - cordova context object\n */\nfunction run(cordovaContext) {\n  var pluginPreferences = configParser.readPreferences(cordovaContext),\n    platformsList = cordovaContext.opts.platforms;\n\n  // if no preferences are found - exit\n  if (pluginPreferences == null) {\n    return;\n  }\n\n  // if no host is defined - exit\n  if (pluginPreferences.hosts == null || pluginPreferences.hosts.length == 0) {\n    console.warn('No host is specified in the config.xml. Universal Links plugin is not going to work.');\n    return;\n  }\n\n  platformsList.forEach(function(platform) {\n    switch (platform) {\n      case ANDROID: {\n          activateUniversalLinksInAndroid(cordovaContext, pluginPreferences);\n          break;\n        }\n      case IOS: {\n          activateUniversalLinksInIos(cordovaContext, pluginPreferences);\n          break;\n        }\n    }\n  });\n}\n\n/**\n * Activate Deep Links for Android application.\n *\n * @param {Object} cordovaContext - cordova context object\n * @param {Object} pluginPreferences - plugin preferences from the config.xml file. Basically, content from <branch-config> tag.\n */\nfunction activateUniversalLinksInAndroid(cordovaContext, pluginPreferences) {\n  // inject preferenes into AndroidManifest.xml\n  androidManifestWriter.writePreferences(cordovaContext, pluginPreferences);\n\n}\n\n/**\n * Activate Universal Links for iOS application.\n *\n * @param {Object} cordovaContext - cordova context object\n * @param {Object} pluginPreferences - plugin preferences from the config.xml file. Basically, content from <branch-config> tag.\n */\nfunction activateUniversalLinksInIos(cordovaContext, pluginPreferences) {\n  // modify xcode project preferences\n  iosProjectPreferences.enableAssociativeDomainsCapability(cordovaContext);\n\n  // generate entitlements file\n  iosProjectEntitlements.generateAssociatedDomainsEntitlements(cordovaContext, pluginPreferences);\n\n}\n"],"sourceRoot":"/source/"}